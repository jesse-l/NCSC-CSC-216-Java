package edu.ncsu.csc216.airport_customs.queues;

/** Imports ArrivingAirplanes to generate passengers. */
import java.util.NoSuchElementException;

import edu.ncsu.csc216.airport_customs.arriving_passengers.ArrivingAirplanes;
/** Imports Passenger to deal with the incoming passengers. */
import edu.ncsu.csc216.airport_customs.arriving_passengers.Passenger;

/**
 * Represents the passengers arriving from their gates that have not yet made it
 * to the customs desks. Implements the TransitSystem class.
 * 
 * @author Jesse Liddle - jaliddl2
 */
public class ArrivalHall implements TransitSystem {
	/** Queue of passengers generated by ArrivingAirplanes */
	private int incomingPassengers;
	/** Array of customs desks. */
	private CustomsDesk[] customsArea;
	/** Line of waiting passengers. */
	protected PassengerQueue queue = new PassengerQueue();

	/** Counter to keep the Residents in the correct line. */

	/**
	 * Arrival Hall constructor that requires an int and an array of
	 * CustomsDesk.
	 * 
	 * @param numOfPassengers
	 *            Number of Passengers
	 * @param customsDesks
	 *            The array of CustomsDesk
	 */
	public ArrivalHall(int numOfPassengers, CustomsDesk[] customsDesks) {
		incomingPassengers = numOfPassengers;
		customsArea = customsDesks;

		// Generates the incoming passenger.
		int n = 0;
		while (n < incomingPassengers) {
			
			// Generates a passenger.
			Passenger person = ArrivingAirplanes.generatePassenger();

			// Adds that passenger to the queue.
			queue.add(person);
			n++;
		}
	}

	/**
	 * Returns the number of passengers still waiting in line.
	 * 
	 * @return size returns the number of passengers in line.
	 */
	@Override
	public int size() {
		return queue.size();
	}

	/**
	 * Method that checks to see if there is a next passenger waiting in line.
	 * 
	 * @return true if there is a next passenger in line.
	 */
	@Override
	public boolean hasNext() {
		return !queue.isEmpty();
	}

	/**
	 * This method removes the first passenger from the queue and sends them to
	 * get into the line.
	 * 
	 * @return processPassenger the next passenger to be processed.
	 */
	@Override
	public Passenger processNext() {
		Passenger beenProcessed = null;

		// Checks to see if the queue is empty or not.
		if (!queue.isEmpty()) {
			
			// Grabs the first person in queue.
			beenProcessed = queue.front();

			// Removes this passenger from the queue.
			queue.remove();

			// Sends this passenger over to the customsArea to wait in line.
			beenProcessed.getInLine(customsArea);
		} else 
			throw new NoSuchElementException("No more passengers waiting.");
		return beenProcessed;
	}

	/**
	 * Determines when the passenger at the front of the ArrivalHall queue will
	 * depart.
	 * 
	 * @return departTime the time at which the passenger will leave
	 */
	@Override
	public int departTimeNext() {
		int departTime = 0;

		// Checks to see if the queue is empty or not
		if (!queue.isEmpty()) {
			
			// Grabs the first person in the queue.
			Passenger firstPerson = queue.front();
			
			// Sets depart time as this passenger's arrivalTime.
			departTime = firstPerson.getArrivalTime();
		} else {
			departTime = Integer.MAX_VALUE;
		}
		return departTime;
	}
}
